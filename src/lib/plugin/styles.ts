import { vanillaExtractPlugin } from '@vanilla-extract/vite-plugin';
import { colord } from 'colord';
import { writeFile } from 'fs';
import prettier from 'prettier';
import type { Plugin } from 'vite';
import { defaultColors, defaultRatios, defaultSizes } from '../../lib/styles/themes/default';
import { walk } from '../../lib/utils/format';
import { PATHS, PLUGIN_CONSOLE, PLUGIN_NAME, PRETTIER_CONFIG } from './common';

const COLOR_MODEL = defaultColors.light;

type CadastreStylesColorTheme = typeof COLOR_MODEL;

type CadastreStylesOptions = {
	colors?: CadastreStylesColorTheme | Record<string, CadastreStylesColorTheme>;
	sizes?: typeof defaultSizes;
	ratios?: typeof defaultRatios;
};

function defineFades(colors: CadastreStylesColorTheme): CadastreStylesColorTheme {
	return walk(colors, (k, v) => {
		const rgb = colord(v + '').toRgb();
		return [k, [rgb.r, rgb.g, rgb.b].join(' ')];
	});
}

/**
 * Create vanilla extract local themes and export to give access to generated themes' classnames for
 * app handling.
 */
function defineThemes(colors: Exclude<CadastreStylesOptions['colors'], undefined>) {
	const kref = Object.keys(COLOR_MODEL);
	let themes: {
		name?: string;
		colors: CadastreStylesColorTheme;
		fades: CadastreStylesColorTheme;
	}[] = [];
	try {
		// Check if provided colors constitute a single root theme
		if (kref.every((k) => k in colors)) {
			themes.push({
				colors: colors as CadastreStylesColorTheme,
				fades: defineFades(colors as CadastreStylesColorTheme),
			});
		} else {
			Object.entries(colors).forEach(([name, t]) => {
				themes.push({
					name,
					colors: t,
					fades: defineFades(t),
				});
			});
		}
		return themes;
	} catch (error) {
		PLUGIN_CONSOLE.error(error);
	}
}

/**
 * Vite plugin to customize Vanilla-extract.
 */
export default function cadastreStyles(
	{
		colors = defaultColors,
		sizes = defaultSizes,
		ratios = defaultRatios,
	}: CadastreStylesOptions = {},
	...args: Parameters<typeof vanillaExtractPlugin>
): Plugin[] {
	function updateStylesFile() {
		PLUGIN_CONSOLE.log('updating styles assets...');
		try {
			const comment = `/*\n* ⚠️ WARNING ⚠️\n*\n* This file was generated by the Cadastre-UI plugin. All changes added manually here will be lost on next iteration run of plugin's generators.\n*\n* Generated at: ${new Date()}\n*\n* ⚠️ WARNING ⚠️\n*/`;
			const kref = Object.keys(COLOR_MODEL);
			let statements: string[];
			// Check if provided colors constitute a single root theme
			if (kref.every((k) => k in colors)) {
				statements = [
					`export const vars = createGlobalTheme(':root', ${JSON.stringify({
						colors,
						fades: defineFades(colors as any),
						sizes,
						ratios,
					})});`,
				];
			} else {
				statements = [
					`const noctx = createGlobalTheme(':root', ${JSON.stringify({
						sizes,
						ratios,
					})});`,
					`const ctx = createThemeContract(${JSON.stringify({
						colors: COLOR_MODEL,
						fades: defineFades(COLOR_MODEL),
					})});`,
					`export const vars = {...noctx, ...ctx};`,
					...Object.entries(colors).map(
						([name, t]) =>
							`const ${name} = createTheme(ctx, ${JSON.stringify({
								colors: t,
								fades: defineFades(t),
							})})`
					),
					`export const themes = {${Object.keys(colors).join(', ')}}`,
				];
			}

			const formatted = prettier.format(
				[
					`import { createGlobalTheme, createThemeContract, createTheme } from "@vanilla-extract/css";`,
					`${comment}`,
					...statements,
				].join('\n\n'),
				{
					parser: 'typescript',
					...PRETTIER_CONFIG,
				}
			);

			writeFile(PATHS.STYLES.OUTPUT, formatted, (error) => {
				if (error) {
					throw PLUGIN_CONSOLE.error(
						'error occured while attempting to generate styles: ',
						error
					);
				}
				PLUGIN_CONSOLE.success('successfully generated new styles from assets!');
			});
		} catch (error) {
			PLUGIN_CONSOLE.error('error updating styles assets', error);
		}
		PLUGIN_CONSOLE.success('completed styles assets update!');
	}

	return [
		{
			name: PLUGIN_NAME('styles'),
			config() {
				updateStylesFile();
			},
			buildStart() {
				updateStylesFile();
			},
		},
		vanillaExtractPlugin(...args),
	];
}
